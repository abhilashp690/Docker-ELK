
    input {
    beats {
	type => "test"
        port => "5044"
    }
}
 
filter{
    if [fields][Component] == "Campaign Director" {
 
        grok {
            match => { "message" => "(?<LogLevel>[%{WORD}]+)([-])?(?<Category>[%{WORD}]+)? (?<logTimestampString>%{MONTHDAY:Day} %{MONTH:Month} %{YEAR:Year} %{HOUR}:%{MINUTE}:%{SECOND}\.%{WORD:Milliseconds}) \[%{DATA:ThreadName}\|%{DATA:ClassName}\.%{DATA:FunctionName}(:%{NUMBER:LineNumber})?] *- %{GREEDYDATA:LogMessage}" }
            tag_on_failure => []
        }
 
        mutate {
            add_field => { Component => "%{[fields][Component]}" }
            gsub => ["LogLevel", "ERR", "ERROR"]
            gsub => ["LogLevel", "IFO", "INFO"]
            gsub => ["LogLevel", "WRN", "WARNING"]
            gsub => ["LogLevel", "FST", "FINEST"]
            gsub => ["LogLevel", "FNR", "FINER"]
            gsub => ["LogLevel", "FNE", "FINE"]
            gsub => ["Category", "TSK", "TASKS"]
            gsub => ["Category", "HST", "HISTORY"]
            gsub => ["Category", "ZNE", "ZONES"]
            gsub => ["Category", "IMP", "IMPORT"]
            gsub => ["Category", "CLP", "CLEANUP"]
            gsub => ["Category", "RST", "REST"]
            gsub => ["Category", "DSH", "DASHBOARD"]
            gsub => ["Category", "SCD", "SCHEDULE"]
            gsub => ["Category", "IMPVERB", "IMPORTVERBOSE"]
            gsub => ["Component", "CmpDir", "Campaign Director"]
        }
 
        date {
 
            match => ["logTimestampString", "dd MMM yyyy HH:mm:ss.SSS"]
            target => "@timestamp"
        }
        mutate { gsub => ["message", "(?i)(ipAddress=\b\d{1,3}\.)\d{1,3}\.\d{1,3}(\.\d{1,3})\b", "\1*****\2"] }
        mutate { gsub => ["message", "(?i)(phone[a-zA-Z0-9_-]*=)([-a-zA-Z0-9.]{3})[-a-zA-Z0-9.]*([-a-zA-Z0-9.]{3})", "\1\2******\3"] }
        mutate { gsub => ["message", "(?i)(email[a-zA-Z0-9_-]*=)([a-zA-Z0-9.@]{2})[a-zA-Z0-9.@]*(\.[-a-z0-9]*)", "\1\2******\3"] }
    } else {
        mutate { add_field => { Component => "%{[fields][Component]}" } }
        grok {
            match => { "message" => "(?<TimeStamp>%{MONTHDAY:Day} %{MONTH:Month} %{YEAR:Year} %{HOUR}:%{MINUTE}:%{SECOND},%{WORD:Milliseconds}) \[%{DATA:ThreadName}] *%{WORD:LogLevel} *- %{DATA:ClassName}\.%{DATA:FunctionName}(:%{NUMBER:LineNumber})? *- %{GREEDYDATA:LogMessage}" }
            tag_on_failure => []
        }
 
        date {
            match => ["timestamp", "dd MMM yyyy HH:mm:ss,SSS"]
        }
    }
}
 
output {
   
  stdout {
    codec => rubydebug
  }
 
  # Sending properly parsed log events to elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
  }
}